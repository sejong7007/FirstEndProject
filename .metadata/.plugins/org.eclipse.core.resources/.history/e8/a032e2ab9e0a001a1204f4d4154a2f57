package com.testtwo.web.pxy;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.function.Consumer;

import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;





@Component("crawler")
@Lazy
public class CrawlingPorxy extends Proxy{

	@Autowired Box<String> box;
	@Autowired Inventory<HashMap<String, String>> inventory;
	
	public ArrayList<HashMap<String, String>> engCrawling(String url) {
		inventory.clear();
		try {
			Document rawData = Jsoup.connect(url).timeout(10 * 1000).get();
			Elements txtOrigin = rawData.select("div[class=\"txt_origin\"] a");
			Elements txtTrans = rawData.select("div[class=\"txt_trans\"]");
			HashMap<String, String> map = null;
			for (int i=0 ; i<txtOrigin.size() ; i++) {
				map = new HashMap<>();
				map.put("origin", txtOrigin.get(i).text());
				map.put("trans", txtTrans.get(i).text());
				inventory.add(map);
			}
			System.out.println("inventory에 담긴: " + inventory.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("--------- 클로링 결과 ----------");
		inventory.get().forEach(System.out::println);
		return inventory.get();
	}
	
	public ArrayList<HashMap<String, String>> cgvCrawling(String url) throws Exception {
		inventory.clear();
		final String USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36";
		
		Connection.Response homePage = Jsoup.connect(url) 
				.method(Connection.Method.GET) 
				.userAgent(USER_AGENT) 
				.execute();
		Document temp = homePage.parse();
		Elements element = temp.select("div.sect-movie-chart");    
		Elements tempforTitle = element.select("strong.title");
		Elements tempforPrecent = element.select("strong.percent");
		Elements tempforTextinfo= element.select("span.txt-info");
		Elements tempforphoto = temp.select("span.thumb-image");
		
		HashMap<String, String> map = null;
		for (int i=0 ; i<tempforTitle.size() ; i++) {
			map = new HashMap<>();
			map.put("title", tempforTitle.get(i).text());
			map.put("percent", tempforPrecent.get(i).text());
			map.put("info", tempforTextinfo.get(i).text());
			map.put("photo", tempforphoto.get(i).select("img").attr("src"));
			inventory.add(map);
		}		
		/*int cgvseq = 0;
		Consumer<Cgv> c = t -> hrMapper.insertCgvRank(t);		
		for (Element tempTitle : tempforTitle) {
			tempCgvs.setCgvseq(String.valueOf(cgvseq+1));
			tempCgvs.setTitle(tempTitle.text());
			tempCgvs.setContent(tempforPrecent.get(cgvseq).text() + "/"+tempforTextinfo.get(cgvseq).text());
			tempCgvs.setImg(tempforphoto.get(cgvseq).select("img").attr("src"));
			tempList.add(tempCgvs);
			cgvseq++;
		}*/
		System.out.println("--------- 클롤링 결과 ----------");
		inventory.get().forEach(System.out::println);
		return inventory.get();
	}
	
	
}

